plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    //id "com.jfrog.bintray" version "1.8.4"    
    //id 'eclipse'

}

apply from: "$rootDir/gradle/versioning.gradle"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'io.github.sogis'

repositories {
    mavenCentral()
    maven { url "http://jars.interlis.ch" }
}

configurations.all {
    resolutionStrategy { 
        force 'ch.interlis:iox-ili:1.20.15'
        force 'ch.interlis:ili2c-tool:5.0.2'
        force 'ch.interlis:ili2c-core:5.0.2'
    }
}

dependencies {
    implementation group: 'com.vividsolutions', name: 'jts-io', version: '1.14.0'
    
    compile 'ch.interlis:iox-ili:1.20.15'
    compile 'ch.interlis:ili2c-tool:5.0.2'
    compile 'ch.interlis:ili2db:4.3.2'
    compile 'org.jgrapht:jgrapht-core:1.3.1'
    //api 'org.jgrapht:jgrapht-ext:1.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
}

test {
    useJUnitPlatform()
}

// TODO: still needed?
task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

/*
ext {
    isReleasedVersion = !project.version.endsWith("-SNAPSHOT")
}
*/

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "ilivalidator-custom-functions"
                url = "https://github.com/sogis/ilivalidator-custom-functions"
                description = "ilivalidator-custom-functions"
                scm {
                    connection = "scm:git:https@github.com/sogis/ilivalidator-custom-functions"
                    developerConnection = "scm:git:https@github.com/sogis/ilivalidator-custom-functions"
                    url = "https://github.com/sogis/ilivalidator-custom-functions"
                }
                licences {
                    licence {
                        name = "MIT"
                        url = "https://github.com/sogis/ilivalidator-custom-functions/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "edigonzales"
                        name = "Stefan Ziegler"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
/*
            if (!isReleasedVersion) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }
*/
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}



/*
def githubRepoUrl = "https://github.com/edigonzales/ilivalidator-custom-functions"
def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "https://github.com/edigonzales/ilivalidator-custom-functions/blob/master/LICENSE"
        }
    }
    developers {
        developer {
            id "edigonzales"
            name "Stefan Ziegler"
            email "stefan.ziegler@bd.so.ch"
        }
    }

    scm {
        url githubRepoUrl
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId project.group
            artifactId 'ilivalidator-custom-functions'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Custom functions for ilivalidator')
                root.appendNode('name', 'ilivalidator-custom-functions')
                root.appendNode('url', githubRepoUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.env.bintrayUser
    key = System.env.bintrayKey
    publications = ['mavenPublication']
    publish = true
    
    pkg {
        repo = 'ilivalidator-custom-functions'
        name = 'ilivalidator-custom-functions'
        userOrg = 'sogis'
        licenses = ['MIT']
        labels = ['interlis', 'ilivalidator', 'validation']        
        vcsUrl = githubRepoUrl
        version {
            name = project.version
            desc = project.version
            released  = new Date()
        }
    }
}
*/


/*
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/edigonzales/ilivalidator-custom-functions")
            credentials {
                username = "edigonzales"//project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}
*/

